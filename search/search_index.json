{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lab Player Docs","text":"<p>Hi eric!</p>"},{"location":"HOWTOs/connecting-to-cluster/","title":"Connecting to cluster","text":"<p>When the build pipeline is run, an artifact is created. To access the .zip file, on Github, go to lab-repository&gt;actions&gt;click on any successful or paused build&gt; scroll to bottom and download the .zip file. Refer to images below:</p> <p></p> <p></p> <p>Uncompress the zip file and inside the directory will be a yaml file named similarly to the following: lfs2580003-20250117.main-e4db075.yaml</p> <p>Move this file into the lab repository that is getting served by the devcontainer.</p> <p>The file will have something similar to the following yaml:</p> <pre><code>apiVersion: \"lab.trainingcert.linuxfoundation.org/v1alpha2\"\nkind: \"LabEnvironment\"\nmetadata:\n  name: \"lfs2580003\"\n  labels:\n    app.kubernetes.io/name: \"lf-security-lab-environment\"\n    app.kubernetes.io/part-of: \"lf-security-lab\"\n    app.kubernetes.io/version: \"20250117.feature-LFS2580003-upgrade-ubuntu-c3b39af\"\n    cert.linuxfoundation.org/needs-secret-ghcr.io-docker: \"true\"\nspec:\n  services:\n    host2:\n      kind: VirtualMachine\n      image: \"ghcr.io/lftraining/lfs2580003-host2-containerdisk:20250117.feature-LFS2580003-upgrade-ubuntu-c3b39af\"\n      ports:\n        - 22\n    host1:\n      kind: VirtualMachine\n      image: \"ghcr.io/lftraining/lfs2580003-host1-containerdisk:20250117.feature-LFS2580003-upgrade-ubuntu-c3b39af\"\n      ports:\n        - 22\n    ttyd:\n      image: ghcr.io/lftraining/ttyd:1.7.7\n      ports:\n        - 7681\n  frontendService: ttyd\n</code></pre> <p>Add Namespace yaml to the top of the document and add meta.namespace to the LabEnvironment yaml. You should have something that resembles the following:</p> <p><pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: jld-test\n  labels:\n    cert.linuxfoundation.org/needs-secret-ghcr.io: \"true\"\n    cert.linuxfoundation.org/needs-secret-ghcr.io-docker: \"true\"\n    cert.linuxfoundation.org/needs-secret-ingress-tls-files: \"true\"\n---\napiVersion: \"lab.trainingcert.linuxfoundation.org/v1alpha2\"\nkind: \"LabEnvironment\"\nmetadata:\n  name: \"lfs2580003\"\n  namespace: \"jld-test\"\n  labels:\n    app.kubernetes.io/name: \"lf-security-lab-environment\"\n    app.kubernetes.io/part-of: \"lf-security-lab\"\n    app.kubernetes.io/version: \"20250117.feature-LFS2580003-upgrade-ubuntu-c3b39af\"\n    cert.linuxfoundation.org/needs-secret-ghcr.io-docker: \"true\"\nspec:\n  services:\n    host2:\n      kind: VirtualMachine\n      image: \"ghcr.io/lftraining/lfs2580003-host2-containerdisk:20250117.feature-LFS2580003-upgrade-ubuntu-c3b39af\"\n      ports:\n        - 22\n    host1:\n      kind: VirtualMachine\n      image: \"ghcr.io/lftraining/lfs2580003-host1-containerdisk:20250117.feature-LFS2580003-upgrade-ubuntu-c3b39af\"\n      ports:\n        - 22\n    ttyd:\n      image: ghcr.io/lftraining/ttyd:1.7.7\n      ports:\n        - 7681\n  frontendService: ttyd\n</code></pre> From inside the lab repository, e.g. LFS258-Labs, get a list of contexts: <pre><code>LFS258-Labs$ kubectl config get-contexts\n</code></pre> Find the context to use and then run: <pre><code>LFS258-Labs$ kubectl use-context contextToUse\n</code></pre> Then apply the yaml: <pre><code>kubectl apply -f nameOfYamlFile.yaml\n</code></pre> To get url: <pre><code>kubectl get ingress -n namespaceFromYaml\n</code></pre> Find the host name and visit the url in a browser. <pre><code>NAME         CLASS   HOSTS                           ADDRESS                       PORTS     AGE\nlfs2580003   nginx   eric-test.sagad.d.lf-labs.org   10.0.159.252,167.234.220.65   80, 443   155m\n</code></pre> You will now have access to the terminal of your vms.</p>"},{"location":"HOWTOs/create-a-compute-environment-using-templates/","title":"HOW TO Creates a Compute Environment Using Templates","text":""},{"location":"HOWTOs/create-a-compute-environment-using-templates/#prerequisites","title":"Prerequisites","text":"<p>You'll need access before begining</p> <p>For access refer to request-access-to-systems.md</p> <p>Before you begin, ensure you:</p> <ul> <li>Have access to lftraining GitHub Organization.</li> <li>Have access to the following repos in the LF-Certification GitHub Organization.<ul> <li>LF-Certification/copier-compute-environment</li> <li>LF-Certification/copier-multi-vm-shim</li> <li>LF-Certification/copier-product</li> </ul> </li> <li>You have setup your environment and with required tools.</li> </ul>"},{"location":"HOWTOs/create-a-compute-environment-using-templates/#create-a-feature-branch-from-main","title":"Create a feature branch from main","text":"<p>open your devcontainer</p> <p>Create a feature branch from main to work on the compute environment.</p> <p>Warning</p> <p>must be named <code>feature/implement-&lt;compute-environment&gt;</code></p> <pre><code>git branch feature/implement-LFS2580004\n</code></pre> <p>switch to your branch</p> <pre><code>git checkout feature/implement-LFS2580004\n</code></pre> <p>cd to <code>compute-environments/available</code></p>"},{"location":"HOWTOs/create-a-compute-environment-using-templates/#render-the-copier-multi-vm-shim-template","title":"Render the copier-multi-vm-shim template","text":"<p>Warning</p> <p>Before rendering copier templates, ensure your git repository is clean.</p> <p>The <code>copier-multi-vm-shim</code> creates the base compute environment directory for the lab. it allows building, packing and publishing to be executed simultaneously on all virtual machine hosts needed in the lab</p> <p>Note</p> <p>TODO explain the front end service explain that the lf-training one has ssh keys explain the default port</p> <pre><code>copier copy --trust \"gh:LF-Certification/copier-multi-vm-shim\" ./LFS2580004\n\ud83c\udfa4 What is the prefix for the compute environments?\n   LFS2580004\n\ud83c\udfa4 What is the image for the front end service?\n   ghcr.io/lftraining/ttyd:1.7.7\n\ud83c\udfa4 What is the port for the front end service?\n   7681\n\nCopying from template version 1.4.0\n    create  .make\n    create  .make/lab\n    create  .make/lab/build\n    create  .make/lab/clean\n    create  .make/lab/package\n    create  .make/lab/publish\n    create  .make/lib.sh\n    create  Makefile\n    create  .copier-answers.yml\n</code></pre> <p>Commit the changes to the repository</p> <pre><code>git add ./LFS2580004/ &amp;&amp; git commit -sm\"feat(LFS2580004): Initalize copier-multi-vm-shim\"\n</code></pre>"},{"location":"HOWTOs/create-a-compute-environment-using-templates/#render-the-virtual-machine-directories-required-for-hosts-within-the-lab-compute-environment","title":"Render the virtual machine directories required for hosts within the lab compute-environment","text":"<p>LFS2580004 Will require 2 VMs in the lab compute environment.</p> <p>cd into the newly created directory:</p> <pre><code>cd ./LFS2580004\n</code></pre> <p>Apply the copier-compute-environment template for each host in the lab compute environment. We will start with <code>host1</code></p> <p>Note</p> <p>only <code>host&lt;N&gt;</code> are allowed as host names</p> <pre><code>copier copy --trust \"gh:LF-Certification/copier-compute-environment\" LFS2580004-host1\n\ud83c\udfa4 What is the name of the compute environment?\n   LFS2580004-host1\n\ud83c\udfa4 Which base image does the compute environment use?\n   ubuntu/kubernetes\n\ud83c\udfa4 How many CPU cores does the item require?\n   2\n\ud83c\udfa4 How much memory does the compute environment require?\n   4096M\n\ud83c\udfa4 How much storage (MiB) does the compute environment require for the user layer?\n   300\n\ud83c\udfa4 How much storage (GiB) does the compute environment require for the build layer?\n   5\n\ud83c\udfa4 Does the compute environment require swap?\n   No\n\ud83c\udfa4 List of ports to expose?\n    (Finish with 'Alt+Enter' or 'Esc then Enter')\n&gt; [22]\n\ud83c\udfa4 How are the scripts implemented?\n   bashp\n\nCopying from template version 1.2.2\n    create  .hooks\n    create  .hooks/lab\n    create  .hooks/lab/post-build.sh\n    create  .hooks/lab/pre-image.sh\n    create  .hooks/p3\n    create  .hooks/p3/post-build.sh\n    create  .hooks/p3/pre-image.sh\n    create  .hooks/temu\n    create  .hooks/temu/pre-image.sh\n    create  .hooks/post-clean.sh\n    create  .make\n    create  .make/jslinux\n    create  .make/jslinux/build\n    create  .make/jslinux/image\n    create  .make/jslinux/package\n    create  .make/jslinux/publish\n    create  .make/jslinux/run\n    create  .make/jslinux/test\n    create  .make/lab\n    create  .make/lab/build\n    create  .make/lab/image\n    create  .make/lab/package\n    create  .make/lab/publish\n    create  .make/lab/run\n    create  .make/lab/test\n    create  .make/lib.sh\n    create  .make/p3\n    create  .make/p3/Dockerfile\n    create  .make/p3/build\n    create  .make/p3/image\n    create  .make/p3/k8s\n    create  .make/p3/k8s/ssh\n    create  .make/p3/k8s/ssh/id_rsa\n    create  .make/p3/k8s/ssh/id_rsa.pub\n    create  .make/p3/package\n    create  .make/p3/publish\n    create  .make/p3/run\n    create  .make/p3/test\n    create  .make/qemu\n    create  .make/qemu/build\n    create  .make/qemu/cloud-init\n    create  .make/qemu/cloud-init/meta-data\n    create  .make/qemu/cloud-init/user-data\n    create  .make/qemu/image\n    create  .make/qemu/package\n    create  .make/qemu/publish\n    create  .make/qemu/run\n    create  .make/qemu/test\n    create  .make/qemu/lib.sh\n    create  .make/qti\n    create  .make/qti/build\n    create  .make/qti/image\n    create  .make/qti/lib.sh\n    create  .make/qti/package\n    create  .make/qti/publish\n    create  .make/temu\n    create  .make/temu/build\n    create  .make/temu/image\n    create  .make/temu/lib.sh\n    create  .make/temu/package\n    create  .make/temu/publish\n    create  .make/temu/run\n    create  .make/temu/test\n    create  Dockerfile\n    create  Makefile\n    create  assets\n    create  assets/format-candidate-layer.sh\n    create  assets/mkfs-hook.sh\n    create  cli.sh\n    create  k8s\n    create  k8s/base\n    create  k8s/base/kustomization.yaml\n    create  k8s/base/virtualized-env.yaml\n    create  k8s/base/manifest.yaml\n    create  scripts\n    create  scripts/answer.sh\n    create  scripts/build.sh\n    create  scripts/score.sh\n    create  scripts/setup.sh\n    create  temu\n    create  temu/.gitattributes\n    create  temu/.gitignore\n    create  temu/temu.cfg\n    create  temu/bbl64.bin\n    create  temu/kernel-riscv64-4.19.249-minimal.bin\n    create  temu/initrd\n    create  .envrc\n    create  .copier-answers.yml\n</code></pre> <p>Now that you have created the first virtual machine directory, commit your changes before rendering the second virtual machine directory.</p> <pre><code>git add ./LFS2580004-host1/ &amp;&amp; git commit -sm\"feat(host1): Initalize copier-compute-environment\"\n</code></pre>"},{"location":"HOWTOs/setup-and-configure-your-environment/","title":"Setup and configure your environment","text":"<p>You need to install all the following locally to develop labs:</p> <p>gh docker python3 copier in your python environment direnv</p>"},{"location":"TODOS/todos/","title":"TODOS","text":""},{"location":"TODOS/todos/#lfs2580003","title":"LFS2580003","text":"<ul> <li>Need wget in vms</li> <li>apt-get install xz-utils </li> <li>need non root user</li> <li>apt install kmod (for modprobe) but maybe not, per cluade: lsmod | grep overlay gives me: overlay               184320  75 Ah, this is interesting - the overlay module is actually already loaded in your system! The error message you received was misleading. You can verify this further by checking the mountinfo: bash Copy cat /proc/filesystems | grep overlay This means you can proceed with your Kubernetes setup - the overlay filesystem requirement is already satisfied. The error you saw might have been because the module is built into the kernel rather than being a loadable module, which is why modprobe couldn't find it as a separate module file but it's still functioning correctly.</li> <li> <p>Add Git large file storage install  </p> <ul> <li>sudo apt install git-lfs    git lfs install</li> </ul> </li> <li> <p>Add documentation about specifics of directory architecture - i.e. what answer.sh is for the history behind it, what setup.sh is for, what build.sh is for</p> </li> </ul>"}]}